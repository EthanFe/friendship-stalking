{"version":3,"sources":["components/CommentInput.js","components/Conversation.js","components/UserView.js","components/AddUserBox.js","components/UserList.js","components/UserlistView.js","components/AddUserListBox.js","components/Sidebar.js","components/LoginToGithubButton.js","components/MainView.js","App.js","serviceWorker.js","index.js"],"names":["CommentInput","_this","this","react_default","a","createElement","onSubmit","event","props","addComment","repoID","commitURL","type","placeholder","value","commentText","onChange","commentTextChanged","Component","Conversation","messages","map","message","index","className","key","sender","canMakeComments","CommentInput_CommentInput","UserView","componentDidMount","anime","targets","translateY","duration","prettifyRepoName","string","split","replace","capitalize","separateCamelCase","word","toUpperCase","slice","join","chars","char","toLowerCase","_this$props$user","user","name","date","repo","commitMessage","ownedByUser","href","toLocaleString","Conversation_Conversation","commentBeingWritten","AddUserBox","componentDidUpdate","prevProps","console","log","addUserErrorMessage","animation","restart","color","easing","font-size","addUserToList","newUserName","newUserNameChanged","UserList","users","activeConvo","activeConversations","find","conversation","parseInt","listDisplayedAt","UserView_UserView","commentsBeingWritten","loggedInUser","AddUserBox_AddUserBox","UserlistView","list","sort","name1","name2","localeCompare","selected","loading","onClick","requestDataForList","listID","title","react_spinners","style","display","margin","border-color","sizeUnit","size","AddUserListBox","newListName","newListNameChanged","createNewList","Sidebar","loggingIn","concat","visibleUserLists","UserlistView_UserlistView","id","displayedList","loadingList","AddUserListBox_AddUserListBox","LoginToGithubButton","MainView","state","loadingUserList","setupSocket","authenticateWithAccessToken","accessToken","localStorage","getItem","setState","socket","emit","token","authenticateWithAccessCode","url","window","location","length","accessCode","code","require","on","receiveComment","loginSuccess","loginFailure","displayUserList","userAddedToList","addUserToListResponse","addVisibleUserList","createdNewList","data","loginData","setItem","setInitialListsState","userlistsData","removeItem","setInitialReposState","conversations","shapeDataForUser","user1","user2","getTime","userlists","commitID","payload","push_id","commits","Date","created_at","_ref","userData","Object","toConsumableArray","undefined","objectSpread","String","push","commentContent","username","_ref2","basicUserData","login","visibleList","newVisibleUserLists","indexOf","_ref3","_ref4","listData","_ref5","target","getLoggedInUser","comments","_callee","regenerator_default","wrap","_context","prev","next","preventDefault","topic","stop","Sidebar_Sidebar","UserList_UserList","LoginToGithubButton_LoginToGithubButton","App","MainView_MainView","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eb0446de.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class CommentInput extends Component {\n  render() {\n    return (\n      <div>\n        <form onSubmit={(event) => this.props.addComment(event, this.props.repoID, this.props.commitURL)}>\n          <input type=\"text\"\n                placeholder=\"Add a comment\"\n                value={this.props.commentText || \"\"}\n                onChange={(event) => this.props.commentTextChanged(event, this.props.repoID)}\n                />\n        </form>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport CommentInput from './CommentInput';\n\nexport default class Conversation extends Component {\n  render() {\n    return (\n      <div>\n        {this.props.messages.map((message, index) => <div className=\"conversation-message\" key={index}>{message.sender}: {message.message}</div>)}\n        {\n          this.props.canMakeComments ? \n          <CommentInput addComment={this.props.addComment}\n          commentText={this.props.commentText}\n          commentTextChanged={this.props.commentTextChanged}\n          repoID={this.props.repoID}\n          commitURL={this.props.commitURL}/>\n          : null\n        }\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport Conversation from './Conversation';\nimport anime from 'animejs'\n\nexport default class UserView extends Component {\n  componentDidMount = () => {\n    anime({\n      targets: '.user-view',\n      translateY: 250,\n      duration: 1200\n    });\n  }\n  \n  render() {\n    const {name, date, repo, repoID, commitMessage, commitURL} = this.props.user\n    let className = \"user-commit-info\"\n    if (this.props.ownedByUser)\n      className += \" owned-by-user\"\n    \n    return (\n      <div className=\"user-view\">\n        <a href={commitURL}>\n          <div className={className}>\n            <h1>{this.prettifyRepoName(repo)}</h1>\n            <p>{name} ({date.toLocaleString()})</p>\n            <p>\"{commitMessage}\"</p>\n          </div>\n        </a>\n\n        <Conversation repoID={repoID}\n                      commitURL={commitURL}\n                      messages={this.props.messages}\n                      commentTextChanged={this.props.commentTextChanged}\n                      commentText={this.props.commentBeingWritten}\n                      addComment={this.props.addComment}\n                      canMakeComments={this.props.canMakeComments}/>\n      </div>\n    );\n  }\n\n  prettifyRepoName = (string) => {\n    string = string.split(\"/\")[1]\n    string = string.replace(/-/g, ' ');\n    string = this.capitalize(string)\n    string = this.separateCamelCase(string)\n    return string\n  }\n\n  capitalize = (string) => {\n    return string.split(\" \").map(word => word[0].toUpperCase() + word.slice(1)).join(\" \")\n  }\n\n  separateCamelCase = (string) => {\n    let chars = string.split(\"\")\n    chars = chars.map((char, index) => index !== 0 && char.toUpperCase() === char && char.toLowerCase() !== char\n                      ? \" \" + char\n                      : char)\n    return chars\n  }\n}","import React, { Component } from 'react';\nimport anime from 'animejs'\n\nexport default class AddUserBox extends Component {\n  componentDidUpdate = (prevProps) => {\n    console.log(this.props.addUserErrorMessage, prevProps.addUserErrorMessage)\n    if (this.props.addUserErrorMessage !== prevProps.addUserErrorMessage && this.props.addUserErrorMessage !== \"\") {\n      if (this.animation)\n        this.animation.restart()\n      this.animation = anime({\n        targets: '.error-message',\n        color: \"#8B0000\",\n        easing: 'linear',\n        duration: 350,\n        \"font-size\": \"12px\"\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"user-view\">\n          <div className=\"user-commit-info new\">\n            <h2>Add a new user to this list!</h2>\n            <form onSubmit={this.props.addUserToList}>\n              <input type=\"text\"\n                    placeholder=\"Github Username\"\n                    value={this.props.newUserName}\n                    onChange={this.props.newUserNameChanged}/>\n            </form>\n            <div className=\"error-message\">{this.props.addUserErrorMessage}</div>\n          </div>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport UserView from './UserView';\nimport AddUserBox from './AddUserBox';\n\nexport default class UserList extends Component {\n  render() {\n    return (\n      <div className=\"user-list\">\n        {this.props.users.map(user => {\n          let activeConvo = this.props.activeConversations.find(conversation => parseInt(conversation.repoID) === user.repoID)\n\n          return (\n            <div key={user.name + this.props.listDisplayedAt}>\n              <UserView user={user}\n                        messages={activeConvo ? activeConvo.messages : []}\n                        commentTextChanged={this.props.commentTextChanged}\n                        commentBeingWritten={this.props.commentsBeingWritten[user.repoID]}\n                        addComment={this.props.addComment}\n                        ownedByUser={user.name === this.props.loggedInUser}\n                        canMakeComments={this.props.loggedInUser !== null}/>\n            </div>\n          )\n        })}\n        <AddUserBox newUserName={this.props.newUserName}\n                    newUserNameChanged={this.props.newUserNameChanged}\n                    addUserToList={this.props.addUserToList}\n                    addUserErrorMessage={this.props.addUserErrorMessage}/>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport { PropagateLoader } from 'react-spinners';\n\nexport default class UserlistView extends Component {\n  render() {\n    const users = this.props.list.users\n    users.sort((name1, name2) => name1.localeCompare(name2))\n\n    let className = \"userlist-box\"\n    if (this.props.selected)\n      className += \" selected-userlist-box\"\n    if (this.props.loading)\n      className += \" loading-userlist-box\"\n    \n    return (\n      <div className={className} onClick={() => this.props.requestDataForList(this.props.listID)}>\n        <div>\n          <div className=\"userlist-title\">\n            {this.props.list.title}\n          </div>\n          {users.map(user => <div className=\"userlist-member\">{user}</div>)}\n        </div>\n        <div className=\"loader-container\">\n          <PropagateLoader\n            style={{\n              display: \"block\",\n              margin: \"0 auto\",\n              \"border-color\": \"red\"}}\n            sizeUnit={\"px\"}\n            size={8}\n            color={'#C6F8FF'}\n            loading={this.props.loading}\n          />\n        </div>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\n\nexport default class AddUserListBox extends Component {\n  render() {\n    // const users = this.props.list.users\n    // users.sort((name1, name2) => name1.localeCompare(name2))\n\n    let className = \"userlist-box\"\n    // if (this.props.selected)\n    //   className += \" selected-userlist-box\"\n    // if (this.props.loading)\n    //   className += \" loading-userlist-box\"\n    \n    return (\n      <div className={className}>\n        <div>\n          <div>\n            <input type=\"text\" placeholder=\"List Name\" value={this.props.newListName} onChange={this.props.newListNameChanged}/>\n          </div>\n          <button onClick={this.props.createNewList}>Create New Userlist</button>\n        </div>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport UserlistView from './UserlistView';\nimport AddUserListBox from './AddUserListBox';\n\nexport default class Sidebar extends Component {\n  render() {\n    return (\n      <div className=\"sidebar\">\n        <span className=\"username\">\n        {\n          !this.props.loggingIn\n          ? `Logged in as ${this.props.loggedInUser}`\n          : `Logging in...`\n        }\n        </span>\n        <div>\n          {this.props.visibleUserLists ?\n            this.props.visibleUserLists.map(list => \n              <UserlistView list={list}\n                            key={list.id}\n                            listID={list.id}\n                            requestDataForList={this.props.requestDataForList}\n                            selected={this.props.displayedList === list.id}\n                            loading={this.props.loadingList === list.id}/>\n            )\n            : null}\n          <AddUserListBox newListName={this.props.newListName} newListNameChanged={this.props.newListNameChanged} createNewList={this.props.createNewList}/>\n        </div>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\n\nexport default class LoginToGithubButton extends Component {\n  render() {\n    const clientID = \"37ec24a03b485597e01b\"\n    return (\n      <div className=\"login-button\">\n        <a href={`https://github.com/login/oauth/authorize?scope=read:user%20repo&client_id=${clientID}`}>Login with Github!</a>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport UserList from './UserList';\nimport Sidebar from './Sidebar';\nimport LoginToGithubButton from './LoginToGithubButton';\nimport anime from 'animejs'\n\nexport default class MainView extends Component {\n  state = {\n    loggingIn: false,\n    newListName: \"\",\n    displayedList: null,\n    commentsBeingWritten: {},\n    activeConversations: [],\n    newUserName: \"\",\n    loadingUserList: false\n  }\n\n  componentDidMount = () => {\n    this.setupSocket()\n    this.authenticateWithAccessToken()\n  }\n\n  authenticateWithAccessToken  = () => {\n    // localStorage.setItem(\"githubAccessToken\", \"help\") \n    const accessToken = localStorage.getItem(\"githubAccessToken\")\n    if (accessToken !== null) {\n      this.setState({loggingIn: true})\n      this.socket.emit(\"authWithGithub\", {token: accessToken})\n    }\n  }\n\n  authenticateWithAccessCode = () => {\n    // if not already logging in with stored token\n    if (!this.state.loggingIn) {\n      const url = window.location.href.split(\"/?code=\")\n      if (url.length > 1) {\n        this.setState({loggingIn: true})\n        const accessCode = url[1]\n        this.socket.emit(\"authWithGithub\", {code: accessCode})\n      }\n    }\n  }\n\n  setupSocket = () => {\n    // const url = \"http://localhost:3000\"\n    // const url = \"http://10.185.5.88:3000/\"\n    // const url = \"https://ddf9867e.ngrok.io\"\n    const socket = require('socket.io-client')();\n    socket.on('commentAdded', this.receiveComment);\n    socket.on(\"authenticationSuccess\", this.loginSuccess)\n    socket.on(\"authenticationFailure\", this.loginFailure)\n    socket.on(\"userDataForDisplay\", this.displayUserList)\n    socket.on(\"userAddedToList\", this.userAddedToList)\n    socket.on(\"addUserToListResponse\", this.addUserToListResponse)\n    socket.on(\"dataForUserlistResponse\", this.addVisibleUserList)\n    socket.on(\"createdNewList\", this.createdNewList)\n    this.socket = socket\n    socket.on(\"connect\", this.authenticateWithAccessCode)\n  }\n\n  loginSuccess = (data) => {\n    this.setState({loggingIn: false})\n    \n    console.log(\"Logged in and got token back!\", data.loginData.accessToken)\n    localStorage.setItem(\"githubAccessToken\", data.loginData.accessToken)\n    this.setState({\n      loginData: data.loginData,\n    })\n    this.setInitialListsState(data.userlistsData)\n  }\n\n  loginFailure = () => {\n    this.setState({loggingIn: false})\n    console.log(\"Failed to login\")\n    // remove existing token in case it was expired\n    localStorage.removeItem(\"githubAccessToken\")\n  }\n\n  setInitialReposState = (data) => {\n    this.setState({\n      activeConversations: data.conversations,\n      users: data.users.map(this.shapeDataForUser)\n      .sort((user1, user2) => user2.date.getTime() - user1.date.getTime())\n    })\n  }\n\n  setInitialListsState = (userlists) => {\n    this.setState({\n      visibleUserLists: userlists\n    })\n  }\n\n  shapeDataForUser = (user) => {\n    return {\n      name: user.name,\n      repo: user.data.repo.name,\n      repoID: user.data.repo.id,\n      commitID: user.data.payload.push_id,\n      commitMessage: user.data.payload.commits[0].message,\n      commitURL: user.data.payload.commits[0].url.replace(\"api.\", \"\").replace(\"/repos\", \"\").replace(\"commits\", \"commit\"),\n      date: new Date(user.data.created_at)\n    }\n  }\n\n  requestDataForList = (listID) => {\n    this.setState({displayedList: listID, loadingUserList: true})\n    this.socket.emit(\"requestReposForList\", {listID, accessToken: this.state.loginData.accessToken})\n\n    const intoSpaceAnimation = anime({\n      targets: '.user-view',\n      translateY: -200,\n      duration: 1200,\n      // complete: (anim) => {\n      //   // intoSpaceAnimation.finished.then(this.setState({users: []}))\n      //   // this.setState({users: [], activeConversations: []})\n      // }\n    });\n  }\n\n  displayUserList = ({userData, conversations}) => {\n    console.log(userData)\n    this.setState({\n      users: userData.map(this.shapeDataForUser)\n      .sort((user1, user2) => user2.date.getTime() - user1.date.getTime()),\n      newUserName: \"\",\n      addUserErrorMessage: \"\",\n      loadingUserList: false,\n      activeConversations: conversations,\n      listDisplayedAt: new Date().getTime()\n    })\n  }\n\n  receiveComment = (data) => {\n    const conversations = [...this.state.activeConversations]\n\n    let conversation = conversations.find(conversation => parseInt(conversation.repoID) === data.repoID)\n    if (conversation !== undefined) {\n      conversation = {...conversation}\n    } else {\n      conversation = {messages: [], repoID: String(data.repoID)}\n      conversations.push(conversation)\n    }\n    conversation.messages.push({message: data.commentContent, sender: data.username})\n    \n    this.setState({activeConversations: conversations})\n  }\n\n  userAddedToList = ({listID, username}) => {\n    // if we are added to a list, giving us visibility of it\n    if (username === this.state.loginData.basicUserData.login) {\n      this.socket.emit(\"requestDataForUserlist\", {listID})\n    }\n    \n    // if a user is added to a list we have visibility of\n    const list = this.state.visibleUserLists.find(visibleList => visibleList.id === listID)\n    if (list !== undefined) {\n      const users = [...list.users, username]\n      const newVisibleUserLists = [...this.state.visibleUserLists]\n      newVisibleUserLists[newVisibleUserLists.indexOf(list)].users = users\n      this.setState({visibleUserLists: newVisibleUserLists})\n      // fetch data for the new user if we're currently displaying it\n      if (listID === this.state.displayedList) {\n        this.requestDataForList(listID)\n      }\n    }\n  }\n\n  addUserToListResponse = ({message}) => {\n    this.setState({addUserErrorMessage: message})\n  }\n\n  addVisibleUserList = ({listData}) => {\n    this.setState({visibleUserLists: [...this.state.visibleUserLists, listData]})\n  }\n\n  createdNewList = ({listData}) => {\n    this.setState({visibleUserLists: [...this.state.visibleUserLists, listData]})\n  }\n\n  render() {\n    if (this.getLoggedInUser() !== null)\n      return (\n        <div className=\"main-view\">\n          <Sidebar loggingIn={this.state.loggingIn}\n                    loggedInUser={this.getLoggedInUser()}\n                    createNewList={this.createNewList}\n                    newListName={this.state.newListName}\n                    newListNameChanged={this.newListNameChanged}\n                    visibleUserLists={this.state.visibleUserLists}\n                    requestDataForList={this.requestDataForList}\n                    displayedList={this.state.displayedList}\n                    loadingList={this.state.loadingUserList ? this.state.displayedList : null}/>\n          {\n            this.state.loginData ? (\n              this.state && /*this.state.activeConversations &&*/ this.state.users ? \n                <UserList users={this.state.users}\n                        activeConversations={this.state.activeConversations}\n\n                        commentsBeingWritten={this.state.commentsBeingWritten}\n                        commentTextChanged={this.commentTextChanged}\n                        addComment={this.addComment}\n                        loggedInUser={this.state.loginData ? this.state.loginData.basicUserData.login : null}\n\n                        newUserName={this.state.newUserName}\n                        newUserNameChanged={this.newUserNameChanged}\n                        addUserToList={this.addUserToList}\n                        addUserErrorMessage={this.state.addUserErrorMessage}\n                        \n                        listDisplayedAt={this.state.listDisplayedAt}/> \n                : <h2>Select a list of users to display!</h2>\n            ) : null\n          }\n        </div>\n      );\n    else\n      return (\n        <div className=\"splash-screen\">\n          <center>\n            <h1>Gitfriendship</h1>\n            <LoginToGithubButton/>\n            </center>\n        </div>\n      )\n  }\n\n  createNewList = () => {\n    this.socket.emit(\"createNewList\", {name: this.state.newListName, username: this.state.loginData.basicUserData.login})\n    console.log(\"Making new list with name \" + this.state.newListName)\n    this.setState({newListName: \"\"})\n  }\n\n  newListNameChanged = (event) => {\n    this.setState({newListName: event.target.value})\n  }\n  \n  getLoggedInUser = () => {\n    return this.state.loginData !== undefined ? this.state.loginData.basicUserData.login : null\n  }\n\n  commentTextChanged = (event, repoID) => {\n    const comments = {...this.state.commentsBeingWritten}\n    comments[repoID] = event.target.value\n    this.setState({commentsBeingWritten: comments})\n  }\n\n  addComment = async (event, repoID, commitURL) => {\n    event.preventDefault()\n\n    this.socket.emit(\"addComment\", {\n                                    repoID: repoID,\n                                    commitURL: commitURL,\n                                    commentContent: this.state.commentsBeingWritten[repoID],\n                                    topic: this.state.users.find(user => user.repoID === repoID).repo,\n                                    username: this.state.loginData.basicUserData.login,\n                                    accessToken: this.state.loginData.accessToken\n                                  })\n    \n    const commentsBeingWritten = {...this.state.commentsBeingWritten}\n    delete commentsBeingWritten[repoID]\n    this.setState({commentsBeingWritten: commentsBeingWritten})\n  }\n\n  newUserNameChanged = (event) => {\n    this.setState({newUserName: event.target.value})\n  }\n\n  addUserToList = (event) => {\n    event.preventDefault()\n    this.setState({newUserName: \"\", addUserErrorMessage: \"\"})\n    this.socket.emit(\"addUserToList\", {\n      listID: this.state.displayedList,\n      username: this.state.newUserName,\n      accessToken: this.state.loginData.accessToken\n    })\n  }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport MainView from './components/MainView';\n\nclass App extends Component {\n  render() {\n    return (\n      <MainView/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}